#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="library")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAuthors(Authors instance);
    partial void UpdateAuthors(Authors instance);
    partial void DeleteAuthors(Authors instance);
    partial void InsertBook_Author(Book_Author instance);
    partial void UpdateBook_Author(Book_Author instance);
    partial void DeleteBook_Author(Book_Author instance);
    partial void InsertBook_Genre(Book_Genre instance);
    partial void UpdateBook_Genre(Book_Genre instance);
    partial void DeleteBook_Genre(Book_Genre instance);
    partial void InsertBooks(Books instance);
    partial void UpdateBooks(Books instance);
    partial void DeleteBooks(Books instance);
    partial void InsertCopies(Copies instance);
    partial void UpdateCopies(Copies instance);
    partial void DeleteCopies(Copies instance);
    partial void InsertCopyStates(CopyStates instance);
    partial void UpdateCopyStates(CopyStates instance);
    partial void DeleteCopyStates(CopyStates instance);
    partial void InsertGenres(Genres instance);
    partial void UpdateGenres(Genres instance);
    partial void DeleteGenres(Genres instance);
    partial void InsertKeepSection(KeepSection instance);
    partial void UpdateKeepSection(KeepSection instance);
    partial void DeleteKeepSection(KeepSection instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderStates(OrderStates instance);
    partial void UpdateOrderStates(OrderStates instance);
    partial void DeleteOrderStates(OrderStates instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["libraryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Authors> Authors
		{
			get
			{
				return this.GetTable<Authors>();
			}
		}
		
		public System.Data.Linq.Table<Book_Author> Book_Author
		{
			get
			{
				return this.GetTable<Book_Author>();
			}
		}
		
		public System.Data.Linq.Table<Book_Genre> Book_Genre
		{
			get
			{
				return this.GetTable<Book_Genre>();
			}
		}
		
		public System.Data.Linq.Table<Books> Books
		{
			get
			{
				return this.GetTable<Books>();
			}
		}
		
		public System.Data.Linq.Table<Copies> Copies
		{
			get
			{
				return this.GetTable<Copies>();
			}
		}
		
		public System.Data.Linq.Table<CopyStates> CopyStates
		{
			get
			{
				return this.GetTable<CopyStates>();
			}
		}
		
		public System.Data.Linq.Table<Genres> Genres
		{
			get
			{
				return this.GetTable<Genres>();
			}
		}
		
		public System.Data.Linq.Table<KeepSection> KeepSection
		{
			get
			{
				return this.GetTable<KeepSection>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderStates> OrderStates
		{
			get
			{
				return this.GetTable<OrderStates>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authors")]
	public partial class Authors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorID;
		
		private string _Name;
		
		private string _Surname;
		
		private EntitySet<Book_Author> _Book_Author;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Authors()
		{
			this._Book_Author = new EntitySet<Book_Author>(new Action<Book_Author>(this.attach_Book_Author), new Action<Book_Author>(this.detach_Book_Author));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authors_Book_Author", Storage="_Book_Author", ThisKey="AuthorID", OtherKey="AuthorID")]
		public EntitySet<Book_Author> Book_Author
		{
			get
			{
				return this._Book_Author;
			}
			set
			{
				this._Book_Author.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_Author(Book_Author entity)
		{
			this.SendPropertyChanging();
			entity.Authors = this;
		}
		
		private void detach_Book_Author(Book_Author entity)
		{
			this.SendPropertyChanging();
			entity.Authors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book_Author")]
	public partial class Book_Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _AuthorID;
		
		private EntityRef<Authors> _Authors;
		
		private EntityRef<Books> _Books;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    #endregion
		
		public Book_Author()
		{
			this._Authors = default(EntityRef<Authors>);
			this._Books = default(EntityRef<Books>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Books.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Authors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authors_Book_Author", Storage="_Authors", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
		public Authors Authors
		{
			get
			{
				return this._Authors.Entity;
			}
			set
			{
				Authors previousValue = this._Authors.Entity;
				if (((previousValue != value) 
							|| (this._Authors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Authors.Entity = null;
						previousValue.Book_Author.Remove(this);
					}
					this._Authors.Entity = value;
					if ((value != null))
					{
						value.Book_Author.Add(this);
						this._AuthorID = value.AuthorID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("Authors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_Book_Author", Storage="_Books", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Books Books
		{
			get
			{
				return this._Books.Entity;
			}
			set
			{
				Books previousValue = this._Books.Entity;
				if (((previousValue != value) 
							|| (this._Books.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Books.Entity = null;
						previousValue.Book_Author.Remove(this);
					}
					this._Books.Entity = value;
					if ((value != null))
					{
						value.Book_Author.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Books");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book_Genre")]
	public partial class Book_Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _GenreID;
		
		private EntityRef<Books> _Books;
		
		private EntityRef<Genres> _Genres;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    #endregion
		
		public Book_Genre()
		{
			this._Books = default(EntityRef<Books>);
			this._Genres = default(EntityRef<Genres>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Books.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genres.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_Book_Genre", Storage="_Books", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Books Books
		{
			get
			{
				return this._Books.Entity;
			}
			set
			{
				Books previousValue = this._Books.Entity;
				if (((previousValue != value) 
							|| (this._Books.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Books.Entity = null;
						previousValue.Book_Genre.Remove(this);
					}
					this._Books.Entity = value;
					if ((value != null))
					{
						value.Book_Genre.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Books");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genres_Book_Genre", Storage="_Genres", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
		public Genres Genres
		{
			get
			{
				return this._Genres.Entity;
			}
			set
			{
				Genres previousValue = this._Genres.Entity;
				if (((previousValue != value) 
							|| (this._Genres.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genres.Entity = null;
						previousValue.Book_Genre.Remove(this);
					}
					this._Genres.Entity = value;
					if ((value != null))
					{
						value.Book_Genre.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("Genres");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Books : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private string _Name;
		
		private System.DateTime _YearPublished;
		
		private string _Description;
		
		private int _CopiesTotal;
		
		private EntitySet<Book_Author> _Book_Author;
		
		private EntitySet<Book_Genre> _Book_Genre;
		
		private EntitySet<Copies> _Copies;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearPublishedChanging(System.DateTime value);
    partial void OnYearPublishedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCopiesTotalChanging(int value);
    partial void OnCopiesTotalChanged();
    #endregion
		
		public Books()
		{
			this._Book_Author = new EntitySet<Book_Author>(new Action<Book_Author>(this.attach_Book_Author), new Action<Book_Author>(this.detach_Book_Author));
			this._Book_Genre = new EntitySet<Book_Genre>(new Action<Book_Genre>(this.attach_Book_Genre), new Action<Book_Genre>(this.detach_Book_Genre));
			this._Copies = new EntitySet<Copies>(new Action<Copies>(this.attach_Copies), new Action<Copies>(this.detach_Copies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearPublished", DbType="Date NOT NULL")]
		public System.DateTime YearPublished
		{
			get
			{
				return this._YearPublished;
			}
			set
			{
				if ((this._YearPublished != value))
				{
					this.OnYearPublishedChanging(value);
					this.SendPropertyChanging();
					this._YearPublished = value;
					this.SendPropertyChanged("YearPublished");
					this.OnYearPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopiesTotal", DbType="Int NOT NULL")]
		public int CopiesTotal
		{
			get
			{
				return this._CopiesTotal;
			}
			set
			{
				if ((this._CopiesTotal != value))
				{
					this.OnCopiesTotalChanging(value);
					this.SendPropertyChanging();
					this._CopiesTotal = value;
					this.SendPropertyChanged("CopiesTotal");
					this.OnCopiesTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_Book_Author", Storage="_Book_Author", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<Book_Author> Book_Author
		{
			get
			{
				return this._Book_Author;
			}
			set
			{
				this._Book_Author.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_Book_Genre", Storage="_Book_Genre", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<Book_Genre> Book_Genre
		{
			get
			{
				return this._Book_Genre;
			}
			set
			{
				this._Book_Genre.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_Copies", Storage="_Copies", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<Copies> Copies
		{
			get
			{
				return this._Copies;
			}
			set
			{
				this._Copies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_Author(Book_Author entity)
		{
			this.SendPropertyChanging();
			entity.Books = this;
		}
		
		private void detach_Book_Author(Book_Author entity)
		{
			this.SendPropertyChanging();
			entity.Books = null;
		}
		
		private void attach_Book_Genre(Book_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Books = this;
		}
		
		private void detach_Book_Genre(Book_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Books = null;
		}
		
		private void attach_Copies(Copies entity)
		{
			this.SendPropertyChanging();
			entity.Books = this;
		}
		
		private void detach_Copies(Copies entity)
		{
			this.SendPropertyChanging();
			entity.Books = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Copies")]
	public partial class Copies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CopyID;
		
		private int _BookID;
		
		private int _CopyStateID;
		
		private int _KeepSectionID;
		
		private EntitySet<Order> _Order;
		
		private EntityRef<Books> _Books;
		
		private EntityRef<CopyStates> _CopyStates;
		
		private EntityRef<KeepSection> _KeepSection;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCopyIDChanging(int value);
    partial void OnCopyIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnCopyStateIDChanging(int value);
    partial void OnCopyStateIDChanged();
    partial void OnKeepSectionIDChanging(int value);
    partial void OnKeepSectionIDChanged();
    #endregion
		
		public Copies()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			this._Books = default(EntityRef<Books>);
			this._CopyStates = default(EntityRef<CopyStates>);
			this._KeepSection = default(EntityRef<KeepSection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CopyID
		{
			get
			{
				return this._CopyID;
			}
			set
			{
				if ((this._CopyID != value))
				{
					this.OnCopyIDChanging(value);
					this.SendPropertyChanging();
					this._CopyID = value;
					this.SendPropertyChanged("CopyID");
					this.OnCopyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Books.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyStateID", DbType="Int NOT NULL")]
		public int CopyStateID
		{
			get
			{
				return this._CopyStateID;
			}
			set
			{
				if ((this._CopyStateID != value))
				{
					if (this._CopyStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopyStateIDChanging(value);
					this.SendPropertyChanging();
					this._CopyStateID = value;
					this.SendPropertyChanged("CopyStateID");
					this.OnCopyStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeepSectionID", DbType="Int NOT NULL")]
		public int KeepSectionID
		{
			get
			{
				return this._KeepSectionID;
			}
			set
			{
				if ((this._KeepSectionID != value))
				{
					if (this._KeepSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeepSectionIDChanging(value);
					this.SendPropertyChanging();
					this._KeepSectionID = value;
					this.SendPropertyChanged("KeepSectionID");
					this.OnKeepSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Copies_Order", Storage="_Order", ThisKey="CopyID", OtherKey="CopyID")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_Copies", Storage="_Books", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Books Books
		{
			get
			{
				return this._Books.Entity;
			}
			set
			{
				Books previousValue = this._Books.Entity;
				if (((previousValue != value) 
							|| (this._Books.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Books.Entity = null;
						previousValue.Copies.Remove(this);
					}
					this._Books.Entity = value;
					if ((value != null))
					{
						value.Copies.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Books");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CopyStates_Copies", Storage="_CopyStates", ThisKey="CopyStateID", OtherKey="CopyStateID", IsForeignKey=true)]
		public CopyStates CopyStates
		{
			get
			{
				return this._CopyStates.Entity;
			}
			set
			{
				CopyStates previousValue = this._CopyStates.Entity;
				if (((previousValue != value) 
							|| (this._CopyStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CopyStates.Entity = null;
						previousValue.Copies.Remove(this);
					}
					this._CopyStates.Entity = value;
					if ((value != null))
					{
						value.Copies.Add(this);
						this._CopyStateID = value.CopyStateID;
					}
					else
					{
						this._CopyStateID = default(int);
					}
					this.SendPropertyChanged("CopyStates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KeepSection_Copies", Storage="_KeepSection", ThisKey="KeepSectionID", OtherKey="KeepSectionID", IsForeignKey=true)]
		public KeepSection KeepSection
		{
			get
			{
				return this._KeepSection.Entity;
			}
			set
			{
				KeepSection previousValue = this._KeepSection.Entity;
				if (((previousValue != value) 
							|| (this._KeepSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KeepSection.Entity = null;
						previousValue.Copies.Remove(this);
					}
					this._KeepSection.Entity = value;
					if ((value != null))
					{
						value.Copies.Add(this);
						this._KeepSectionID = value.KeepSectionID;
					}
					else
					{
						this._KeepSectionID = default(int);
					}
					this.SendPropertyChanged("KeepSection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Copies = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Copies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CopyStates")]
	public partial class CopyStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CopyStateID;
		
		private string _Name;
		
		private EntitySet<Copies> _Copies;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCopyStateIDChanging(int value);
    partial void OnCopyStateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CopyStates()
		{
			this._Copies = new EntitySet<Copies>(new Action<Copies>(this.attach_Copies), new Action<Copies>(this.detach_Copies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyStateID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CopyStateID
		{
			get
			{
				return this._CopyStateID;
			}
			set
			{
				if ((this._CopyStateID != value))
				{
					this.OnCopyStateIDChanging(value);
					this.SendPropertyChanging();
					this._CopyStateID = value;
					this.SendPropertyChanged("CopyStateID");
					this.OnCopyStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CopyStates_Copies", Storage="_Copies", ThisKey="CopyStateID", OtherKey="CopyStateID")]
		public EntitySet<Copies> Copies
		{
			get
			{
				return this._Copies;
			}
			set
			{
				this._Copies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Copies(Copies entity)
		{
			this.SendPropertyChanging();
			entity.CopyStates = this;
		}
		
		private void detach_Copies(Copies entity)
		{
			this.SendPropertyChanging();
			entity.CopyStates = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genres : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreID;
		
		private string _Name;
		
		private EntitySet<Book_Genre> _Book_Genre;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Genres()
		{
			this._Book_Genre = new EntitySet<Book_Genre>(new Action<Book_Genre>(this.attach_Book_Genre), new Action<Book_Genre>(this.detach_Book_Genre));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genres_Book_Genre", Storage="_Book_Genre", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<Book_Genre> Book_Genre
		{
			get
			{
				return this._Book_Genre;
			}
			set
			{
				this._Book_Genre.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_Genre(Book_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Genres = this;
		}
		
		private void detach_Book_Genre(Book_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Genres = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KeepSection")]
	public partial class KeepSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeepSectionID;
		
		private string _Name;
		
		private EntitySet<Copies> _Copies;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeepSectionIDChanging(int value);
    partial void OnKeepSectionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public KeepSection()
		{
			this._Copies = new EntitySet<Copies>(new Action<Copies>(this.attach_Copies), new Action<Copies>(this.detach_Copies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeepSectionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KeepSectionID
		{
			get
			{
				return this._KeepSectionID;
			}
			set
			{
				if ((this._KeepSectionID != value))
				{
					this.OnKeepSectionIDChanging(value);
					this.SendPropertyChanging();
					this._KeepSectionID = value;
					this.SendPropertyChanged("KeepSectionID");
					this.OnKeepSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KeepSection_Copies", Storage="_Copies", ThisKey="KeepSectionID", OtherKey="KeepSectionID")]
		public EntitySet<Copies> Copies
		{
			get
			{
				return this._Copies;
			}
			set
			{
				this._Copies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Copies(Copies entity)
		{
			this.SendPropertyChanging();
			entity.KeepSection = this;
		}
		
		private void detach_Copies(Copies entity)
		{
			this.SendPropertyChanging();
			entity.KeepSection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _UserID;
		
		private int _CopyID;
		
		private int _OrderStateID;
		
		private System.DateTime _OpenDate;
		
		private System.DateTime _ReturnDate;
		
		private System.DateTime _LastStateChangeDate;
		
		private EntityRef<Copies> _Copies;
		
		private EntityRef<OrderStates> _OrderStates;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCopyIDChanging(int value);
    partial void OnCopyIDChanged();
    partial void OnOrderStateIDChanging(int value);
    partial void OnOrderStateIDChanged();
    partial void OnOpenDateChanging(System.DateTime value);
    partial void OnOpenDateChanged();
    partial void OnReturnDateChanging(System.DateTime value);
    partial void OnReturnDateChanged();
    partial void OnLastStateChangeDateChanging(System.DateTime value);
    partial void OnLastStateChangeDateChanged();
    #endregion
		
		public Order()
		{
			this._Copies = default(EntityRef<Copies>);
			this._OrderStates = default(EntityRef<OrderStates>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyID", DbType="Int NOT NULL")]
		public int CopyID
		{
			get
			{
				return this._CopyID;
			}
			set
			{
				if ((this._CopyID != value))
				{
					if (this._Copies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopyIDChanging(value);
					this.SendPropertyChanging();
					this._CopyID = value;
					this.SendPropertyChanged("CopyID");
					this.OnCopyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStateID", DbType="Int NOT NULL")]
		public int OrderStateID
		{
			get
			{
				return this._OrderStateID;
			}
			set
			{
				if ((this._OrderStateID != value))
				{
					if (this._OrderStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStateIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStateID = value;
					this.SendPropertyChanged("OrderStateID");
					this.OnOrderStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="Date NOT NULL")]
		public System.DateTime OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Date NOT NULL")]
		public System.DateTime ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStateChangeDate", DbType="Date NOT NULL")]
		public System.DateTime LastStateChangeDate
		{
			get
			{
				return this._LastStateChangeDate;
			}
			set
			{
				if ((this._LastStateChangeDate != value))
				{
					this.OnLastStateChangeDateChanging(value);
					this.SendPropertyChanging();
					this._LastStateChangeDate = value;
					this.SendPropertyChanged("LastStateChangeDate");
					this.OnLastStateChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Copies_Order", Storage="_Copies", ThisKey="CopyID", OtherKey="CopyID", IsForeignKey=true)]
		public Copies Copies
		{
			get
			{
				return this._Copies.Entity;
			}
			set
			{
				Copies previousValue = this._Copies.Entity;
				if (((previousValue != value) 
							|| (this._Copies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Copies.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._Copies.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._CopyID = value.CopyID;
					}
					else
					{
						this._CopyID = default(int);
					}
					this.SendPropertyChanged("Copies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStates_Order", Storage="_OrderStates", ThisKey="OrderStateID", OtherKey="OrderStateID", IsForeignKey=true)]
		public OrderStates OrderStates
		{
			get
			{
				return this._OrderStates.Entity;
			}
			set
			{
				OrderStates previousValue = this._OrderStates.Entity;
				if (((previousValue != value) 
							|| (this._OrderStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStates.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._OrderStates.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._OrderStateID = value.OrderStateID;
					}
					else
					{
						this._OrderStateID = default(int);
					}
					this.SendPropertyChanged("OrderStates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Order", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStates")]
	public partial class OrderStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStateID;
		
		private string _Name;
		
		private EntitySet<Order> _Order;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStateIDChanging(int value);
    partial void OnOrderStateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OrderStates()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStateID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderStateID
		{
			get
			{
				return this._OrderStateID;
			}
			set
			{
				if ((this._OrderStateID != value))
				{
					this.OnOrderStateIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStateID = value;
					this.SendPropertyChanged("OrderStateID");
					this.OnOrderStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStates_Order", Storage="_Order", ThisKey="OrderStateID", OtherKey="OrderStateID")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStates = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStates = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Username;
		
		private string _Password;
		
		private string _email;
		
		private string _Codeword;
		
		private EntitySet<Order> _Order;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnCodewordChanging(string value);
    partial void OnCodewordChanged();
    #endregion
		
		public Users()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codeword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Codeword
		{
			get
			{
				return this._Codeword;
			}
			set
			{
				if ((this._Codeword != value))
				{
					this.OnCodewordChanging(value);
					this.SendPropertyChanging();
					this._Codeword = value;
					this.SendPropertyChanged("Codeword");
					this.OnCodewordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Order", Storage="_Order", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
